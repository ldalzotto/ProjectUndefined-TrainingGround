//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RTPuzzle
{
    using GameConfigurationID;
    using UnityEngine;
    using UnityEngine.AI;

    [System.Serializable()]
    [UnityEngine.CreateAssetMenu(fileName = "AIObjectTypeDefinitionInherentData", menuName = "Configuration/PuzzleGame/AIObjectTypeDefinitionConfiguration/AIObjectTypeDefiniti" +
        "onInherentData", order = 1)]
    public class AIObjectTypeDefinitionInherentData : ScriptableObject
    {
        [CustomEnum(ConfigurationType = typeof(InteractiveObjectTypeDefinitionConfiguration), OpenToConfiguration = true)]
        public InteractiveObjectTypeDefinitionID InteractiveObjectTypeDefinitionID;

        [CustomEnum(ConfigurationType = typeof(AIObjectConfiguration))]
        public AIObjectID AIObjectID;

        [Inline(CreateAtSameLevelIfAbsent = true)]
        public GenericPuzzleAIComponentsV2 GenericPuzzleAIComponents;

        public void DefineAIObject(AIObjectType aIObjectType, PuzzlePrefabConfiguration puzzlePrefabConfiguration, PuzzleGameConfiguration puzzleGameConfiguration)
        {
            DefineAI(aIObjectType);
            DefineInteractiveObject(aIObjectType, puzzlePrefabConfiguration, puzzleGameConfiguration);
        }

        private void DefineInteractiveObject(AIObjectType aIObjectType, PuzzlePrefabConfiguration puzzlePrefabConfiguration, PuzzleGameConfiguration puzzleGameConfiguration)
        {
            if (this.InteractiveObjectTypeDefinitionID != InteractiveObjectTypeDefinitionID.NONE)
            {
                puzzleGameConfiguration.InteractiveObjectTypeDefinitionConfiguration.ConfigurationInherentData.TryGetValue(this.InteractiveObjectTypeDefinitionID, out InteractiveObjectTypeDefinitionInherentData InteractiveObjectTypeDefinitionInherentData);
                if (InteractiveObjectTypeDefinitionInherentData != null)
                {
                    var InteractiveObjectType = aIObjectType.gameObject.AddComponent<InteractiveObjectType>();
                    InteractiveObjectTypeDefinitionInherentData.DefineInteractiveObject(InteractiveObjectType, puzzlePrefabConfiguration, puzzleGameConfiguration);
                }
            }
        }

        private void DefineAI(AIObjectType aIObjectType)
        {
            aIObjectType.AiID = this.AIObjectID;

            var GenericPuzzleAIBehaviorContainer = new GenericPuzzleAIBehaviorContainer();
            foreach (var definitionModuleAction in this.GenericPuzzleAIComponents.RangeDefinitionModulesActivation)
            {
                if (definitionModuleAction.Value)
                {
                    var moduleConfiguration = this.GenericPuzzleAIComponents.RangeDefinitionModules[definitionModuleAction.Key];

                    if (moduleConfiguration.GetType() == typeof(AIPatrolComponent))
                    {
                        var AIPatrolComponent = (AIPatrolComponent)moduleConfiguration;
                        if (AIPatrolComponent.AIPatrolManagerType == AIPatrolManagerType.RANDOM)
                        {
                            GenericPuzzleAIBehaviorContainer.AIPatrolComponentManager = new AIRandomPatrolComponentMananger(AIPatrolComponent);
                        }
                        else
                        {
                            GenericPuzzleAIBehaviorContainer.AIPatrolComponentManager = new AIScriptedPatrolComponentManager(AIPatrolComponent);
                        }
                    }
                    else if (moduleConfiguration.GetType() == typeof(AIProjectileEscapeComponent))
                    {
                        var AIProjectileEscapeComponent = (AIProjectileEscapeComponent)moduleConfiguration;
                        GenericPuzzleAIBehaviorContainer.AIProjectileEscapeManager = new AIProjectileWithCollisionEscapeManager(AIProjectileEscapeComponent);
                    }
                    else if (moduleConfiguration.GetType() == typeof(AIEscapeWithoutTriggerComponent))
                    {
                        var AIEscapeWithoutTriggerComponent = (AIEscapeWithoutTriggerComponent)moduleConfiguration;
                        GenericPuzzleAIBehaviorContainer.AIEscapeWithoutTriggerManager = new AIEscapeWithoutTriggerManager(AIEscapeWithoutTriggerComponent);
                    }
                    else if (moduleConfiguration.GetType() == typeof(AITargetZoneComponent))
                    {
                        var AITargetZoneComponent = (AITargetZoneComponent)moduleConfiguration;
                        GenericPuzzleAIBehaviorContainer.AITargetZoneManager = new AITargetZoneEscapeManager(AITargetZoneComponent);
                    }
                    else if (moduleConfiguration.GetType() == typeof(AIAttractiveObjectComponent))
                    {
                        var AIAttractiveObjectComponent = (AIAttractiveObjectComponent)moduleConfiguration;
                        if (AIAttractiveObjectComponent.AttractiveObjectStrategyType == AttractiveObjectStrategyType.LOOSE)
                        {
                            GenericPuzzleAIBehaviorContainer.AIAttractiveObjectManager = new AIAttractiveObjectLooseManager(AIAttractiveObjectComponent);
                        }
                        else
                        {
                            GenericPuzzleAIBehaviorContainer.AIAttractiveObjectManager = new AIAttractiveObjectPersistantManager(AIAttractiveObjectComponent);
                        }
                    }
                    else if (moduleConfiguration.GetType() == typeof(AIFearStunComponent))
                    {
                        var AIFearStunComponent = (AIFearStunComponent)moduleConfiguration;
                        GenericPuzzleAIBehaviorContainer.AIFearStunManager = new AIFearStunManager(AIFearStunComponent);
                    }
                    else if (moduleConfiguration.GetType() == typeof(AIPlayerEscapeComponent))
                    {
                        var AIPlayerEscapeComponent = (AIPlayerEscapeComponent)moduleConfiguration;
                        GenericPuzzleAIBehaviorContainer.PlayerEscapeManager = new AIPlayerEscapeManager(AIPlayerEscapeComponent);
                    }
                    else if (moduleConfiguration.GetType() == typeof(AIMoveTowardPlayerComponent))
                    {
                        var AIMoveTowardPlayerComponent = (AIMoveTowardPlayerComponent)moduleConfiguration;
                        GenericPuzzleAIBehaviorContainer.AIMoveTowardPlayerManager = new AIMoveTowardPlayerManager(AIMoveTowardPlayerComponent);
                    }
                    else if (moduleConfiguration.GetType() == typeof(AIDisarmObjectComponent))
                    {
                        var AIDisarmObjectComponent = (AIDisarmObjectComponent)moduleConfiguration;
                        GenericPuzzleAIBehaviorContainer.AIDisarmObjectManager = new AIDisarmObjectManager(AIDisarmObjectComponent);
                    }
                    //${addNewEntry}
                }
            }
            aIObjectType.GenericPuzzleAIBehaviorContainer = GenericPuzzleAIBehaviorContainer;

            this.CreateNavMeshAgentIfNecessary(aIObjectType);
        }

        private void CreateNavMeshAgentIfNecessary(AIObjectType aIObjectType)
        {
            if (aIObjectType.GetComponent<NavMeshAgent>() == null)
            {
                var aiAgent = aIObjectType.gameObject.AddComponent<NavMeshAgent>();
                aiAgent.baseOffset = 0f;
                aiAgent.speed = 0f;
                aiAgent.angularSpeed = 120f;
                aiAgent.acceleration = 999999f;
                aiAgent.stoppingDistance = 1.5f;
                aiAgent.autoBraking = true;
                aiAgent.radius = 1.5f;
                aiAgent.height = 2f;
                aiAgent.avoidancePriority = 50;
                aiAgent.autoTraverseOffMeshLink = true;
                aiAgent.autoRepath = true;
            }
        }
    }
}
