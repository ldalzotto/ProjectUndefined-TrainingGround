//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using GameConfigurationID;
using UnityEngine;

namespace RTPuzzle
{


    public class GrabObjectModule : RTPuzzle.InteractiveObjectModule
    {

        #region External Dependencies
        private PlayerActionPuzzleEventsManager PlayerActionPuzzleEventsManager;
        #endregion

        [CustomEnum()]
        public GameConfigurationID.GrabObjectID GrabObjectID;

        private SphereCollider grabObjectRange;
        private InteractiveObjectType parentInteractiveObject;
        private GrabObjectInherentData grabObjectInherentData;
        private GrabObjectAction grabObjectAction;

        #region Data Retrieval
        public GrabObjectAction GrabObjectAction { get => grabObjectAction; }
        public InteractiveObjectType ParentInteractiveObject { get => parentInteractiveObject; }
        public SphereCollider GrabObjectRange { get => grabObjectRange; }
        #endregion

        public void Init(GrabObjectInherentData GrabObjectInherentData)
        {
            #region External Dependencies
            this.PlayerActionPuzzleEventsManager = GameObject.FindObjectOfType<PlayerActionPuzzleEventsManager>();
            #endregion
            this.parentInteractiveObject = GetComponentInParent<InteractiveObjectType>();
            this.grabObjectInherentData = GrabObjectInherentData;

            this.grabObjectRange = this.GetComponent<SphereCollider>();
            this.grabObjectRange.radius = this.grabObjectInherentData.EffectRadius;

            this.grabObjectAction = new GrabObjectAction(new GrabActionInherentData(this.GrabObjectID, this.grabObjectInherentData.PlayerActionToIncrement, SelectionWheelNodeConfigurationId.GRAB_CONTEXT_ACTION_WHEEL_CONFIG, 0f));
        }

        public virtual void Tick(float d, float timeAttenuationFactor)
        {
        }

        private void OnTriggerEnter(Collider other)
        {
            var collisionType = other.GetComponent<CollisionType>();
            if (collisionType != null && collisionType.IsPlayer)
            {
                this.PlayerActionPuzzleEventsManager.OnGrabObjectEnter(this);
            }
        }

        public void OnInteractiveObjectDestroyed()
        {
            this.PlayerActionPuzzleEventsManager.OnGrabObjectExit(this);
        }

        private void OnTriggerExit(Collider other)
        {
            var collisionType = other.GetComponent<CollisionType>();
            if (collisionType != null && collisionType.IsPlayer)
            {
                this.PlayerActionPuzzleEventsManager.OnGrabObjectExit(this);
            }
        }

    }
}
