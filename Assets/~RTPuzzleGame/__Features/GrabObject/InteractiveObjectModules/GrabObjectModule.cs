//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using CoreGame;
using GameConfigurationID;
using UnityEngine;

namespace RTPuzzle
{

    public interface IGrabObjectModuleDataRetrieval : ISelectableModule
    {

    }

    public class GrabObjectModule : RTPuzzle.InteractiveObjectModule, IGrabObjectModuleDataRetrieval
    {

        #region External Dependencies
        private IGrabObjectEventListener IGrabObjectEventListener;
        #endregion

        [CustomEnum()]
        public GameConfigurationID.GrabObjectID GrabObjectID;

        #region Internal Modules Dependencies
        private ModelObjectModule modelObjectModule;
        #endregion

        private SphereCollider grabObjectRange;
        private InteractiveObjectType parentInteractiveObject;
        private GrabObjectInherentData grabObjectInherentData;
        private GrabObjectAction grabObjectAction;

        #region Data Retrieval
        public InteractiveObjectType ParentInteractiveObject { get => parentInteractiveObject; }
        public SphereCollider GrabObjectRange { get => grabObjectRange; }
        public RTPPlayerAction GetAssociatedPlayerAction()
        {
            return grabObjectAction;
        }

        public ExtendedBounds GetAverageModelBoundLocalSpace()
        {
            if (this.modelObjectModule != null) { return this.modelObjectModule.GetAverageModelBoundLocalSpace(); };
            return default(ExtendedBounds);
        }
        #endregion

        public override void Init(InteractiveObjectInitializationObject interactiveObjectInitializationObject, IInteractiveObjectTypeDataRetrieval IInteractiveObjectTypeDataRetrieval, IInteractiveObjectTypeEvents IInteractiveObjectTypeEvents)
        {
            GrabObjectInherentData GrabObjectInherentData = interactiveObjectInitializationObject.GrabObjectInherentData;
            if (GrabObjectInherentData == null)
            {
                GrabObjectInherentData = PuzzleGameSingletonInstances.PuzzleGameConfigurationManager.GrabObjectConfiguration()[this.GrabObjectID];
            }

            this.modelObjectModule = IInteractiveObjectTypeDataRetrieval.GetModelObjectModule();

            #region External Dependencies
            this.IGrabObjectEventListener = PuzzleGameSingletonInstances.PuzzleEventsManager;
            #endregion

            this.parentInteractiveObject = GetComponentInParent<InteractiveObjectType>();
            this.grabObjectInherentData = GrabObjectInherentData;

            this.grabObjectRange = this.GetComponent<SphereCollider>();
            this.grabObjectRange.radius = this.grabObjectInherentData.EffectRadius;

            this.grabObjectAction = new GrabObjectAction(new GrabActionInherentData(this.GrabObjectID, this.grabObjectInherentData.PlayerActionToIncrementOrAdd, SelectionWheelNodeConfigurationId.GRAB_CONTEXT_ACTION_WHEEL_CONFIG, 0f));

        }
        
        public virtual void Tick(float d, float timeAttenuationFactor)
        {
        }

        private void OnTriggerEnter(Collider other)
        {
            var collisionType = other.GetComponent<CollisionType>();
            if (collisionType != null && collisionType.IsPlayer)
            {
                this.IGrabObjectEventListener.PZ_EVT_OnGrabObjectEnter(this);
            }
        }

        public override void OnInteractiveObjectDestroyed()
        {
            this.IGrabObjectEventListener.PZ_EVT_OnGrabObjectExit(this);
        }

        private void OnTriggerExit(Collider other)
        {
            var collisionType = other.GetComponent<CollisionType>();
            if (collisionType != null && collisionType.IsPlayer)
            {
                this.IGrabObjectEventListener.PZ_EVT_OnGrabObjectExit(this);
            }
        }

    }
}
