//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using UnityEngine;

namespace RTPuzzle
{

    public class AILogicColliderModule : RTPuzzle.InteractiveObjectModule
    {
        #region Internal Dependencies
        private AIObjectDataRetriever AIObjectDataRetirever;
        #endregion

        #region State
        private List<IAILogicColliderModuleListener> PhysicsEventListeners;
        private BoxCollider associatedCollider;
        #endregion

        #region Data Retrieval
        public BoxCollider GetCollider()
        {
            return this.associatedCollider;
        }
        #endregion

        public override void Init(InteractiveObjectInitializationObject interactiveObjectInitializationObject, IInteractiveObjectTypeDataRetrieval IInteractiveObjectTypeDataRetrieval,
            IInteractiveObjectTypeEvents IInteractiveObjectTypeEvents)
        {
            this.AIObjectDataRetirever = interactiveObjectInitializationObject.ParentAIObjectTypeReference;
            this.associatedCollider = GetComponent<BoxCollider>();
        }

        public void Tick(float d, float timeAttenuationFactor)
        {
        }

        #region Physics Events
        private void OnTriggerEnter(Collider other)
        {
            var collisionType = other.GetComponent<CollisionType>();
            if (collisionType != null)
            {
                if (collisionType.IsRTAttractiveObject)
                {
                    var IAttractiveObjectModuleDataRetriever = AttractiveObjectModule.GetAttractiveObjectFromCollisionType(collisionType);
                    if (IAttractiveObjectModuleDataRetriever != null)
                    {
                        IAttractiveObjectModuleDataRetriever.GetIAttractiveObjectModuleEvent().OnAITriggerEnter(this.AIObjectDataRetirever);
                    }
                }
                if (collisionType.IsTargetZone)
                {
                    TargetZoneModule.FromCollisionType(collisionType).GetITargetZoneModuleEvent()
                        .OnAITriggerEnter(this.AIObjectDataRetirever);
                }

            }
            
            if (this.PhysicsEventListeners != null)
            {
                foreach (var physicsEventListener in this.PhysicsEventListeners)
                {
                    physicsEventListener.OnAILogicColliderTriggerEnter(other);
                }
            }
        }

        private void OnTriggerStay(Collider other)
        {
            var collisionType = other.GetComponent<CollisionType>();
            if (collisionType != null)
            {
                if (collisionType.IsRTAttractiveObject)
                {
                    var IAttractiveObjectModuleDataRetriever = AttractiveObjectModule.GetAttractiveObjectFromCollisionType(collisionType);
                    if (IAttractiveObjectModuleDataRetriever != null)
                    {
                        IAttractiveObjectModuleDataRetriever.GetIAttractiveObjectModuleEvent().OnAITriggerStay(this.AIObjectDataRetirever);
                    }
                }
                if (collisionType.IsTargetZone)
                {
                    TargetZoneModule.FromCollisionType(collisionType).GetITargetZoneModuleEvent()
                           .OnAITriggerStay(this.AIObjectDataRetirever);
                }
            }
            
            if (this.PhysicsEventListeners != null)
            {
                foreach (var physicsEventListener in this.PhysicsEventListeners)
                {
                    physicsEventListener.OnAILogicColliderTriggerStay(other);
                }
            }
        }

        private void OnTriggerExit(Collider other)
        {
            var collisionType = other.GetComponent<CollisionType>();
            if (collisionType != null)
            {
                if (collisionType.IsRTAttractiveObject)
                {
                    var IAttractiveObjectModuleDataRetriever = AttractiveObjectModule.GetAttractiveObjectFromCollisionType(collisionType);
                    if (IAttractiveObjectModuleDataRetriever != null)
                    {
                        IAttractiveObjectModuleDataRetriever.GetIAttractiveObjectModuleEvent().OnAITriggerExit(this.AIObjectDataRetirever);
                    }
                }
            }

            if (this.PhysicsEventListeners != null)
            {
                foreach (var physicsEventListener in this.PhysicsEventListeners)
                {
                    physicsEventListener.OnAILogicColliderTriggerExit(other);
                }
            }
        }
        #endregion

        #region External Events
        public void AddListener(IAILogicColliderModuleListener IAILogicColliderModuleListener)
        {
            if (this.PhysicsEventListeners == null) { this.PhysicsEventListeners = new List<IAILogicColliderModuleListener>(); }
            this.PhysicsEventListeners.Add(IAILogicColliderModuleListener);
        }
        #endregion

        public static class AILogicColliderModuleInstancer
        {
            public static void PopulateFromDefinition(AILogicColliderModule aILogicColliderModule, AILogicColliderModuleDefinition aILogicColliderModuleDefinition)
            {
                var boxCollider = aILogicColliderModule.GetComponent<BoxCollider>();
                boxCollider.center = aILogicColliderModuleDefinition.Center;
                boxCollider.size = aILogicColliderModuleDefinition.Size;
            }
        }

        public static AIObjectDataRetriever FromCollisionType(CollisionType collisionType)
        {
            if (collisionType == null) { return null; }
            var AILogicColliderModule = collisionType.GetComponent<AILogicColliderModule>();
            if (AILogicColliderModule != null) { return AILogicColliderModule.GetComponentInParent<AIObjectType>(); }
            return null;
        }
    }

    public interface IAILogicColliderModuleListener
    {
        void OnAILogicColliderTriggerEnter(Collider other);

        void OnAILogicColliderTriggerStay(Collider other);

        void OnAILogicColliderTriggerExit(Collider other);
    }
}
