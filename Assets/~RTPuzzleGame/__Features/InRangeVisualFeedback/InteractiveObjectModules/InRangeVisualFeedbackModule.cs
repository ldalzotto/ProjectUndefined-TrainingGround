//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using GameConfigurationID;
using System;
using System.Collections.Generic;
using UnityEngine;

namespace RTPuzzle
{

    public class InRangeVisualFeedbackModule : InteractiveObjectModule, IInRangeVisualFeedbackModuleDataRetriever, RangeTypeObjectEventListener
    {
        public RangeTypeObject InRangeVisualFeedbackTrackerRange;

        public override void Init(InteractiveObjectInitializationObject interactiveObjectInitializationObject, IInteractiveObjectTypeDataRetrieval IInteractiveObjectTypeDataRetrieval,
                IInteractiveObjectTypeEvents IInteractiveObjectTypeEvents)
        {
            this.ResolveInternalDependencies();

            RangeTypeObjectInitializer InRangeVisualFeedbackTrackerRangeInitializationData = null;
            var InRangeVisualFeedbakcModuleInitializationData = interactiveObjectInitializationObject.InRangeVisualFeedbakcModuleInitializationData;
            if (interactiveObjectInitializationObject != null && interactiveObjectInitializationObject.InRangeVisualFeedbakcModuleInitializationData != null)
            {
                InRangeVisualFeedbackTrackerRangeInitializationData = interactiveObjectInitializationObject.InRangeVisualFeedbakcModuleInitializationData.RangeInitializer;
            }
            this.InRangeVisualFeedbackTrackerRange.Init(InRangeVisualFeedbackTrackerRangeInitializationData, new List<RangeTypeObjectEventListener>() { this });
        }

        private List<BoxCollider> inRangeCollidersForVisual = new List<BoxCollider>();
        private List<ModelObjectModule> inRangeModelObjectForVisual = new List<ModelObjectModule>();

        private List<Action> localListenersOnDestroy = new List<Action>();

        #region IInRangeVisualFeedbackModuleDataRetriever
        public ModelObjectModule[] GetInRangeModelObjectsForVisual()
        {
            ModelObjectModule[] InRangeModelObjectsForVisual = new ModelObjectModule[this.inRangeCollidersForVisual.Count];

            for (var i = 0; i < this.inRangeCollidersForVisual.Count; i++)
            {
                if (this.InRangeVisualFeedbackTrackerRange.RangeType.IsInsideAndNotOccluded(this.inRangeCollidersForVisual[i], forceObstacleOcclusionIfNecessary: false))
                {
                    InRangeModelObjectsForVisual[i] = this.inRangeModelObjectForVisual[i];
                }
            }
            return InRangeModelObjectsForVisual;
        }
        public RangeTypeID GetAssociatedRangeTypeID()
        {
            return this.InRangeVisualFeedbackTrackerRange.RangeType.RangeTypeID;
        }
        #endregion

        public void ResolveInternalDependencies()
        {
            this.InRangeVisualFeedbackTrackerRange = GetComponentInChildren<RangeTypeObject>();
        }

        public override void OnInteractiveObjectDestroyed()
        {
            this.InRangeVisualFeedbackTrackerRange.OnRangeDestroyed();

            for (var i = 0; i < this.inRangeCollidersForVisual.Count; i++)
            {
                if (this.localListenersOnDestroy[i] != null) { this.localListenersOnDestroy[i].Invoke(); }
            }
        }

        public void Tick(float d, float timeAttenuationFactor)
        {
        }

        public void OnRangeTriggerEnter(CollisionType other)
        {
            if (other != null)
            {
                if (other.IsAI)
                {
                    var IAILogicColliderModuleDataRetriever = AILogicColliderModule.AILogicColliderModuleFromCollisionType(other);
                    if (IAILogicColliderModuleDataRetriever != null)
                    {
                        this.inRangeCollidersForVisual.Add(IAILogicColliderModuleDataRetriever.GetCollider());
                        this.inRangeModelObjectForVisual.Add(IAILogicColliderModuleDataRetriever.IInteractiveObjectTypeDataRetrieval.GetModelObjectModule());
                        this.localListenersOnDestroy.Add(null);
                    }
                }
                else if (other.IsRepelable)
                {
                    var IObjectRepelModuleDataRetrieval = (IObjectRepelModuleDataRetrieval)ObjectRepelModule.FromCollisionType(other);
                    if (IObjectRepelModuleDataRetrieval != null)
                    {
                        this.inRangeCollidersForVisual.Add(IObjectRepelModuleDataRetrieval.GetObjectRepelCollider());
                        this.inRangeModelObjectForVisual.Add(IObjectRepelModuleDataRetrieval.IInteractiveObjectTypeDataRetrieval.GetModelObjectModule());
                        Action destroyCallBack = null;

                        var ILineVisualFeedbackEvent = IObjectRepelModuleDataRetrieval.ILineVisualFeedbackEvent;
                        if (ILineVisualFeedbackEvent != null)
                        {
                            ILineVisualFeedbackEvent.CreateLineDirectionPositioning(DottedLineID.REPELABLE_OBJECT_FEEDBACK, this.InRangeVisualFeedbackTrackerRange);
                            destroyCallBack = () => ILineVisualFeedbackEvent.DestroyLine(this.InRangeVisualFeedbackTrackerRange);
                        }
                        this.localListenersOnDestroy.Add(destroyCallBack);
                    }
                }

            }
        }

        public void OnRangeTriggerExit(CollisionType other)
        {
            if (other != null)
            {
                if (other.IsAI)
                {
                    var IAILogicColliderModuleDataRetriever = AILogicColliderModule.AILogicColliderModuleFromCollisionType(other);
                    if (IAILogicColliderModuleDataRetriever != null)
                    {
                        var index = this.inRangeCollidersForVisual.IndexOf(IAILogicColliderModuleDataRetriever.GetCollider());
                        if (index >= 0)
                        {
                            this.inRangeCollidersForVisual.RemoveAt(index);
                            this.inRangeModelObjectForVisual.RemoveAt(index);
                            this.localListenersOnDestroy.RemoveAt(index);
                        }
                    }
                }
                else if (other.IsRepelable)
                {
                    var IObjectRepelModuleDataRetrieval = (IObjectRepelModuleDataRetrieval)ObjectRepelModule.FromCollisionType(other);
                    if (IObjectRepelModuleDataRetrieval != null)
                    {
                        var index = this.inRangeCollidersForVisual.IndexOf(IObjectRepelModuleDataRetrieval.GetObjectRepelCollider());
                        if (index >= 0)
                        {
                            this.inRangeCollidersForVisual.RemoveAt(index);
                            this.inRangeModelObjectForVisual.RemoveAt(index);
                            this.localListenersOnDestroy.RemoveAt(index);
                        }

                        var ILineVisualFeedbackEvent = IObjectRepelModuleDataRetrieval.ILineVisualFeedbackEvent;
                        if (ILineVisualFeedbackEvent != null)
                        {
                            ILineVisualFeedbackEvent.DestroyLine(this.InRangeVisualFeedbackTrackerRange);
                        }
                    }
                }
            }
        }
    }

    public class InRangeVisualFeedbakcModuleInitializationData
    {
        public RangeTypeObjectInitializer RangeInitializer;
    }
}