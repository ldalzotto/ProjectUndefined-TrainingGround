//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RTPuzzle
{
    using GameConfigurationID;
    using UnityEngine;
    using UnityEngine.AI;

    public class AIDisarmObjectManager : AbstractAIDisarmObjectManager
    {

        private bool isDisarmingObject;

        #region External Dependencies
        private DisarmObjectModule disarmingObject;
        private PuzzleEventsManager PuzzleEventsManager;
        #endregion

        private AIObjectID aiID;
        private NavMeshAgent agent;

        public AIDisarmObjectManager(AIDisarmObjectComponent associatedAIComponent) : base(associatedAIComponent)
        {
        }

        #region External Events
        public override void OnDisarmingObjectStart(DisarmObjectModule disarmingObject)
        {
            this.disarmingObject = disarmingObject;
            //Make agent to look at object
            this.agent.transform.rotation = Quaternion.LookRotation(Vector3.ProjectOnPlane(this.disarmingObject.transform.position - this.agent.transform.position, this.agent.transform.up));
            this.SetIsDisarmingObject(true);
        }

        public override void OnDisarmingObjectExit(DisarmObjectModule disarmingObject)
        {
            if (this.disarmingObject != null && this.disarmingObject == disarmingObject)
            {
                this.disarmingObject = null;
                this.SetIsDisarmingObject(false);
            }
        }
        #endregion

        public void Init(NavMeshAgent agent, PuzzleEventsManager PuzzleEventsManager, AIObjectID aiID)
        {
            this.agent = agent;
            this.aiID = aiID;
            this.PuzzleEventsManager = PuzzleEventsManager;
        }

        public override void BeforeManagersUpdate(float d, float timeAttenuationFactor)
        {
        }

        public override bool IsManagerEnabled()
        {
            return (this.disarmingObject != null && this.isDisarmingObject);
        }

        public override void OnManagerTick(float d, float timeAttenuationFactor, ref NPCAIDestinationContext NPCAIDestinationContext)
        {
            this.disarmingObject.IncreaseTimeElapsedBy(d * timeAttenuationFactor);
            if (this.disarmingObject.IsAskingToBeDestroyed())
            {
                this.OnDisarmingObjectExit(this.disarmingObject);
            }
            //don't move while disarming
        }

        public override void OnDestinationReached()
        {
        }

        public override void OnStateReset()
        {
            this.SetIsDisarmingObject(false);
        }

        private void SetIsDisarmingObject(bool value)
        {
            if (this.isDisarmingObject && !value)
            {
                this.PuzzleEventsManager.PZ_EVT_AI_DisarmObject_End(this.aiID);
            }
            else if (!this.isDisarmingObject && value)
            {
                this.PuzzleEventsManager.PZ_EVT_AI_DisarmObject_Start(this.aiID, this.disarmingObject);
            }
            this.isDisarmingObject = value;
        }
    }
}
