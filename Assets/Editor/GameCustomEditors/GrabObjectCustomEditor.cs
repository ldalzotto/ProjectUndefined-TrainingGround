//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Editor_GameDesigner;
using RTPuzzle;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace Editor_GameCustomEditors
{
    [ExecuteInEditMode]
    [CustomEditor(typeof(GrabObjectModule))]
    public class GrabObjectCustomEditor : AbstractGameCustomEditorWithLiveSelection<GrabObjectModule, GrabObjectCustomEditorContext, GrabObjectConfigurationModule, EditGrabObject>
    {
        private void OnEnable()
        {
            if (this.target != null)
            {
                this.drawModules = new List<GUIDrawModule<GrabObjectModule, GrabObjectCustomEditorContext>>() {
                    new GrabObjectEffectRange()
                };
                this.context = new GrabObjectCustomEditorContext();
                this.context.GrabObjectModule = (GrabObjectModule)target;
                var GrabObjectConfiguration = AssetFinder.SafeSingleAssetFind<GrabObjectConfiguration>("t:" + typeof(GrabObjectConfiguration));
                if (GrabObjectConfiguration.ConfigurationInherentData.ContainsKey(this.context.GrabObjectModule.GrabObjectID))
                {
                    this.context.GrabObjectInherentData = GrabObjectConfiguration.ConfigurationInherentData[this.context.GrabObjectModule.GrabObjectID];
                }
            }
        }
    }

    public class GrabObjectCustomEditorContext
    {
        public GrabObjectModule GrabObjectModule;
        public GrabObjectInherentData GrabObjectInherentData;
    }


    class GrabObjectEffectRange : GUIDrawModule<GrabObjectModule, GrabObjectCustomEditorContext>
    {
        public override void SceneGUI(GrabObjectCustomEditorContext context, GrabObjectModule target)
        {
            Handles.color = Color.magenta;
            var position = context.GrabObjectModule.transform.position;
            if (context.GrabObjectInherentData != null)
            {
                Handles.Label(position + Vector3.up * context.GrabObjectInherentData.EffectRadius, nameof(context.GrabObjectInherentData.EffectRadius), MyEditorStyles.LabelMagenta);
                Handles.DrawWireDisc(position, Vector3.up, context.GrabObjectInherentData.EffectRadius);
            }
           
        }
    }

}