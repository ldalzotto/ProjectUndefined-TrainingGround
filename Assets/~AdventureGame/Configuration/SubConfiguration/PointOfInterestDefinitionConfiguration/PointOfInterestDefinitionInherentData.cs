//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdventureGame
{
    using GameConfigurationID;
    using System;
    using System.Collections.Generic;
    using UnityEngine;
    using UnityEngine.AI;
    using static AdventureGame.PointOfInterestTrackerModule;
    using static AdventureGame.PointOfInterestVisualMovementModule;

    [System.Serializable()]
    [UnityEngine.CreateAssetMenu(fileName = "PointOfInterestDefinitionInherentData", menuName = "Configuration/AdventureGame/PointOfInterestDefinitionConfiguration/PointOfInteres" +
        "tDefinitionInherentData", order = 1)]
    public class PointOfInterestDefinitionInherentData : AbstractObjectDefinitionConfigurationInherentData
    {
        public PointOfInterestDefinitionInherentData() { }

        public override List<Type> ModuleTypes => PointOfInterestModuleTypesConstants.PointOfInterestModuleTypes;

        [CustomEnum()]
        public PointOfInterestId PointOfInterestId;

        [Inline(createAtSameLevelIfAbsent: true)]
        public PointOfInterestSharedDataTypeInherentData PointOfInterestSharedDataTypeInherentData;

        public void DefinePointOfInterest(PointOfInterestType PointOfInterestType, AdventurePrefabConfiguration AdventurePrefabConfiguration)
        {
            PointOfInterestType.PointOfInterestId = PointOfInterestId;

            if (this.RangeDefinitionModulesActivation != null && this.RangeDefinitionModules != null)
            {
                foreach (var rangeDefinitionModuleActivation in this.RangeDefinitionModulesActivation)
                {
                    if (rangeDefinitionModuleActivation.Value)
                    {
                        var moduleConfiguration = this.RangeDefinitionModules[rangeDefinitionModuleActivation.Key];

                        if (moduleConfiguration.GetType() == typeof(PointOfInterestCutsceneControllerModuleDefinition))
                        {
                            var PointOfInterestCutsceneControllerModuleDefinition = (PointOfInterestCutsceneControllerModuleDefinition)moduleConfiguration;
                            var PointOfInterestCutsceneControllerModule = MonoBehaviour.Instantiate(AdventurePrefabConfiguration.BasePointOfInterestCutsceneControllerModule, PointOfInterestType.transform);
                            this.CreateAndEnableNavMeshAgent(PointOfInterestType);
                        }
                        else if (moduleConfiguration.GetType() == typeof(PointOfInterestTrackerModuleDefinition))
                        {
                            var PointOfInterestTrackerModuleDefinition = (PointOfInterestTrackerModuleDefinition)moduleConfiguration;
                            var PointOfInterestTrackerModule = MonoBehaviour.Instantiate(AdventurePrefabConfiguration.BasePointOfInterestTrackerModule, PointOfInterestType.transform);
                            PointOfInterestTrackerModuleInstancer.PopuplateFromDefinition(PointOfInterestTrackerModule, PointOfInterestTrackerModuleDefinition);
                        }
                        else if (moduleConfiguration.GetType() == typeof(PointOfInterestVisualMovementModuleDefinition))
                        {
                            var PointOfInterestVisualMovementModuleDefinition = (PointOfInterestVisualMovementModuleDefinition)moduleConfiguration;
                            var PointOfInterestVisualMovementModule = MonoBehaviour.Instantiate(AdventurePrefabConfiguration.BasePointOfInterestVisualMovementModule, PointOfInterestType.transform);
                            PointOfInterestVisualMovementModuleInstancer.PopuplateFromDefinition(PointOfInterestVisualMovementModule, PointOfInterestVisualMovementModuleDefinition);
                        }
                        else if (moduleConfiguration.GetType() == typeof(PointOfInterestModelObjectModuleDefinition))
                        {
                            var PointOfInterestModelObjectModuleDefinition = (PointOfInterestModelObjectModuleDefinition)moduleConfiguration;
                            var PointOfInterestModelObjectModule = MonoBehaviour.Instantiate(AdventurePrefabConfiguration.BasePointOfInterestModelObjectModule, PointOfInterestType.transform);
                            var modelObject = GameObject.Instantiate(PointOfInterestModelObjectModuleDefinition.ModelObject, PointOfInterestModelObjectModule.transform);
                            modelObject.transform.localPosition = Vector3.zero;
                            modelObject.transform.localRotation = Quaternion.identity;
                        }
                    }
                }
            }
        }

        private void CreateAndEnableNavMeshAgent(PointOfInterestType PointOfInterestType)
        {
            if (PointOfInterestType.PointOfInterestDefinitionID != PointOfInterestDefinitionID.PLAYER)
            {
                var poiNavMeshAgent = PointOfInterestType.transform.GetComponent<NavMeshAgent>();
                if (poiNavMeshAgent == null)
                {
                    poiNavMeshAgent = PointOfInterestType.gameObject.AddComponent<NavMeshAgent>();
                    poiNavMeshAgent.baseOffset = 0f;
                    poiNavMeshAgent.speed = 20f;
                    poiNavMeshAgent.angularSpeed = 120f;
                    poiNavMeshAgent.acceleration = 3600;
                    poiNavMeshAgent.stoppingDistance = 0f;
                    poiNavMeshAgent.autoBraking = true;
                    poiNavMeshAgent.radius = 0.5f;
                    poiNavMeshAgent.height = 2f;
                    poiNavMeshAgent.autoTraverseOffMeshLink = true;
                    poiNavMeshAgent.autoRepath = true;
                }
            }
        }
    }
}
