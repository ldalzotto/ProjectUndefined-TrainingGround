//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdventureGame
{
    using GameConfigurationID;
    using System;
    using System.Collections.Generic;
    using UnityEngine;
    using UnityEngine.AI;

    [System.Serializable()]
    [UnityEngine.CreateAssetMenu(fileName = "PointOfInterestDefinitionInherentData", menuName = "Configuration/AdventureGame/PointOfInterestDefinitionConfiguration/PointOfInteres" +
        "tDefinitionInherentData", order = 1)]
    public class PointOfInterestDefinitionInherentData : AbstractObjectDefinitionConfigurationInherentData
    {
        public PointOfInterestDefinitionInherentData() { }

        public override List<Type> ModuleTypes => PointOfInterestModuleTypesConstants.PointOfInterestModuleTypes;

        [CustomEnum()]
        public PointOfInterestId PointOfInterestId;

        [Inline(createAtSameLevelIfAbsent: true)]
        public PointOfInterestSharedDataTypeInherentData PointOfInterestSharedDataTypeInherentData;

        public void DefinePointOfInterest(PointOfInterestType PointOfInterestType, AdventurePrefabConfiguration AdventurePrefabConfiguration)
        {
            PointOfInterestType.PointOfInterestId = PointOfInterestId;

            if (this.PointOfInterestSharedDataTypeInherentData != null)
            {
                if (this.PointOfInterestSharedDataTypeInherentData.InteractionWithPlayerAllowed)
                {
                    this.CreateRigidBody(PointOfInterestType);
                }
            }

            var pointOfInterestModules = PointOfInterestType.transform.parent.GetComponentInChildren<PointOfInterestModules>();

            if (this.RangeDefinitionModulesActivation != null && this.RangeDefinitionModules != null)
            {
                foreach (var rangeDefinitionModuleActivation in this.RangeDefinitionModulesActivation)
                {
                    if (rangeDefinitionModuleActivation.Value)
                    {
                        var moduleConfiguration = this.RangeDefinitionModules[rangeDefinitionModuleActivation.Key];

                        if (moduleConfiguration.GetType() == typeof(PointOfInterestCutsceneControllerModuleDefinition))
                        {
                            var PointOfInterestCutsceneControllerModuleDefinition = (PointOfInterestCutsceneControllerModuleDefinition)moduleConfiguration;
                            var PointOfInterestCutsceneControllerModule = MonoBehaviour.Instantiate(AdventurePrefabConfiguration.BasePointOfInterestCutsceneControllerModule, pointOfInterestModules.transform);
                            this.EnableNavMeshAgent(PointOfInterestType);
                        }
                    }
                }
            }
        }

        private void EnableNavMeshAgent(PointOfInterestType PointOfInterestType)
        {
            if (PointOfInterestType.PointOfInterestDefinitionID != PointOfInterestDefinitionID.PLAYER)
            {
                PointOfInterestType.transform.parent.GetComponent<NavMeshAgent>().enabled = true;
            }
        }

        private void CreateRigidBody(PointOfInterestType PointOfInterestType)
        {
            if (PointOfInterestType.PointOfInterestDefinitionID != PointOfInterestDefinitionID.PLAYER)
            {
                var Rigidbody = PointOfInterestType.transform.parent.gameObject.AddComponent<Rigidbody>();
                Rigidbody.constraints = RigidbodyConstraints.FreezeAll;
                Rigidbody.useGravity = false;
            }
        }
    }
}
