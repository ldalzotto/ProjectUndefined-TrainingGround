// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
uniform int TextureWidth;
uniform int TextureHeight;

Texture2DArray<float4> _TmpRangeRenderArrayBuffer;
RWTexture2D<float4> _RangeRenderBuffer;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float _PixelDistance = 3;
	float4 center = _TmpRangeRenderArrayBuffer[id.xyz];
	if (center.x != 0 || center.y != 0 || center.z != 0) {

		int bottomPosition = max(id.y - _PixelDistance, 0);
		int upPosition = min(id.y + _PixelDistance, TextureHeight - 1);
		int leftPosition = max(id.x - _PixelDistance, 0);
		int rightPosition = min(id.x + _PixelDistance, TextureWidth - 1);

		float4 comparisonCol =
			_TmpRangeRenderArrayBuffer[float3(rightPosition, id.y, id.z)]
			* _TmpRangeRenderArrayBuffer[float3(id.x, upPosition, id.z)]
			* _TmpRangeRenderArrayBuffer[float3(leftPosition, id.y, id.z)]
			* _TmpRangeRenderArrayBuffer[float3(id.x, bottomPosition, id.z)]
			* _TmpRangeRenderArrayBuffer[float3(rightPosition, upPosition, id.z)]
			* _TmpRangeRenderArrayBuffer[float3(rightPosition, bottomPosition, id.z)]
			* _TmpRangeRenderArrayBuffer[float3(leftPosition, bottomPosition, id.z)]
			* _TmpRangeRenderArrayBuffer[float3(leftPosition, upPosition, id.z)];

		_RangeRenderBuffer[id.xy] = _RangeRenderBuffer[id.xy] + ((center * (comparisonCol.x == 0)) + (center * float4(0.2, 0.2, 0.2, 0.2)));
	}
	

}
